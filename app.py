import streamlit as st
import pandas as pd
import yfinance as yf
import plotly.graph_objects as go
import os

# === Configuration ===
st.set_page_config(page_title="William Higgons Screener", layout="wide")
st.title("üìä Screener William Higgons")
st.markdown("### üßæ Aper√ßu du screening")
st.write("Les entreprises en **vert** passent le filtre William Higgons.")

# === Chargement des donn√©es ===
@st.cache_data
def load_data():
    df = pd.read_csv("data/all_results_yfinance_clean.csv")

    df["Higgons Valid"] = (
        (df["PER"] < 12)
        & (df["ROE (%)"] > 10)
        & (df["Revenue Growth (%)"] > 0)
    )

    # Pays
    suffix_to_country = {
        ".DE": "üá©üá™ Allemagne", ".PA": "üá´üá∑ France", ".AS": "üá≥üá± Pays-Bas",
        ".MI": "üáÆüáπ Italie", ".SW": "üá®üá≠ Suisse", ".L": "üá¨üáß Royaume-Uni",
        ".MC": "üá™üá∏ Espagne", ".CO": "üá©üá∞ Danemark", ".ST": "üá∏üá™ Su√®de",
        ".BR": "üáßüá™ Belgique", ".OL": "üá≥üá¥ Norv√®ge", ".IR": "üáÆüá™ Irlande",
        ".VI": "üá¶üáπ Autriche"
    }

    def detect_country(ticker):
        for suffix, country in suffix_to_country.items():
            if ticker.endswith(suffix):
                return country
        return "‚ùì Inconnu"

    df["Pays"] = df["Ticker"].apply(detect_country)

    # Emojis secteurs/industries
    sector_emojis = {
        "Technology": "üíª", "Healthcare": "üíä", "Financial Services": "üí∞",
        "Consumer Defensive": "üõí", "Consumer Cyclical": "üß∫", "Industrials": "üèóÔ∏è",
        "Energy": "‚õΩ", "Basic Materials": "‚öóÔ∏è", "Utilities": "üîå",
        "Communication Services": "üì°", "Real Estate": "üè†"
    }

    industry_emojis = {
        "Software - Application": "üì±", "Semiconductor Equipment & Materials": "üîã",
        "Drug Manufacturers - General": "üíâ", "Packaged Foods": "ü•´",
        "Insurance - Diversified": "üõ°Ô∏è", "Telecom Services": "üìû",
        "Specialty Industrial Machinery": "üè≠", "Banks - Diversified": "üè¶",
        "Life Insurance": "üß¨", "Unknown": "‚ùì"
    }

    df["Sector"] = df.apply(lambda row: f"{sector_emojis.get(row['Sector'], '‚ùì')} {row['Sector']}", axis=1)
    df["Industry"] = df.apply(lambda row: f"{industry_emojis.get(row['Industry'], 'üè∑Ô∏è')} {row['Industry']}", axis=1)

    df["üß† Statut"] = df["Higgons Valid"].apply(lambda x: "‚úÖ Valid√©" if x else "‚ùå Rejet√©")
    return df

df = load_data()

# === Filtres ===
st.sidebar.header("üß∞ Filtres")
search_ticker = st.sidebar.text_input("üîé Rechercher un ticker", "")

pays_filter = st.sidebar.selectbox("üåç Pays", options=[""] + sorted(df["Pays"].unique()))
sector_filter = st.sidebar.selectbox("üè∑Ô∏è Secteur", options=[""] + sorted(df["Sector"].unique()))
industry_filter = st.sidebar.selectbox("üè≠ Industrie", options=[""] + sorted(df["Industry"].unique()))

per_min, per_max = st.sidebar.slider("üí∞ PER", 0.0, 100.0, (0.0, 100.0))
roe_min = st.sidebar.slider("üìà ROE (%) minimum", 0.0, 100.0, 0.0)
growth_min = st.sidebar.slider("üìä Croissance min. (%)", -50.0, 100.0, 0.0)

only_higgons = st.sidebar.checkbox("‚úÖ Seulement les soci√©t√©s valid√©es")

# === Application des filtres ===
df_filtered = df.copy()

if search_ticker:
    df_filtered = df_filtered[df_filtered["Ticker"].str.contains(search_ticker.upper())]

if pays_filter:
    df_filtered = df_filtered[df_filtered["Pays"] == pays_filter]

if sector_filter:
    df_filtered = df_filtered[df_filtered["Sector"] == sector_filter]

if industry_filter:
    df_filtered = df_filtered[df_filtered["Industry"] == industry_filter]

df_filtered = df_filtered[
    (df_filtered["PER"] >= per_min) & (df_filtered["PER"] <= per_max) &
    (df_filtered["ROE (%)"] >= roe_min) &
    (df_filtered["Revenue Growth (%)"] >= growth_min)
]

if only_higgons:
    df_filtered = df_filtered[df_filtered["üß† Statut"] == "‚úÖ Valid√©"]

# === Affichage principal ===
df_display = df_filtered.drop(columns=["Higgons Valid"])
st.dataframe(df_display, use_container_width=True)

# === Date mise √† jour
st.markdown("---")
try:
    with open("data/last_update.txt", "r") as f:
        last_update = f.read().strip()
    st.info(f"üïí Derni√®re mise √† jour automatique des donn√©es : `{last_update}`")
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Aucune mise √† jour automatique d√©tect√©e.")

# === Analyse individuelle ===
if not df_display.empty:
    st.markdown("---")
    st.subheader("üìä Analyse individuelle")

    selected_ticker = st.selectbox(
        "S√©lectionner une entreprise pour voir son graphique :",
        df_display["Ticker"].unique()
    )

    stock = yf.Ticker(selected_ticker)
    hist = stock.history(period="max")

    if hist.empty:
        st.warning("Donn√©es historiques indisponibles pour ce ticker.")
    else:
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=hist.index, y=hist["Close"], name="Cours de cl√¥ture"))
        fig.update_layout(
            title=f"üìà √âvolution historique de {selected_ticker}",
            xaxis_title="Date",
            yaxis_title="Prix (‚Ç¨)",
            template="plotly_dark",
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)

    info = stock.info
    st.markdown("### üßæ Fiche signal√©tique")
    col1, col2 = st.columns(2)

    with col1:
        st.metric("Nom", info.get("shortName", "N/A"))
        st.metric("Prix actuel", f'{info.get("currentPrice", "N/A")} {info.get("currency", "")}')
        st.metric("PER", round(info.get("trailingPE", 0), 2) if info.get("trailingPE") else "N/A")
        st.metric("Capitalisation", f'{round(info.get("marketCap", 0)/1e9, 2)} B' if info.get("marketCap") else "N/A")

    with col2:
        st.metric("Secteur", info.get("sector", "N/A"))
        st.metric("Industrie", info.get("industry", "N/A"))
        st.metric("Dividende (%)", info.get("dividendYield", "N/A"))
        st.metric("Beta", info.get("beta", "N/A"))
else:
    st.warning("Aucune entreprise √† afficher pour l‚Äôanalyse individuelle.")